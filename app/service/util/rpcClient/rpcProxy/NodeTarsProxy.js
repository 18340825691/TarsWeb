// **********************************************************************
// Parsed By TarsParser(1.1.0), Generated By tools(20180620)
// TarsParser Maintained By <WSRD> and tools Maintained By <superzheng>
// Generated from "NodeTars.tars" by Client Mode
// **********************************************************************

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var tars = tars || {};
module.exports.tars = tars;

tars.NodeTarsProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
};

tars.NodeTarsProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

tars.NodeTarsProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};


tars.User_t = function() {
    this.id = 0;
    this.score = 0;
    this.name = "";
    this._classname = "tars.User_t";
};
tars.User_t._classname = "tars.User_t";
tars.User_t._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.User_t._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.User_t._readFrom = function (is) {
    var tmp = new tars.User_t();
    tmp.id = is.readInt32(0, false, 0);
    tmp.score = is.readInt32(1, false, 0);
    tmp.name = is.readString(2, false, "");
    return tmp;
};
tars.User_t.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
    os.writeInt32(1, this.score);
    os.writeString(2, this.name);
};
tars.User_t.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.User_t.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.User_t.prototype.toObject = function() { 
    return {
        "id" : this.id,
        "score" : this.score,
        "name" : this.name
    };
};
tars.User_t.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("id") && (this.id = json.id);
    json.hasOwnProperty("score") && (this.score = json.score);
    json.hasOwnProperty("name") && (this.name = json.name);
};
tars.User_t.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.User_t.new = function () {
    return new tars.User_t();
};
tars.User_t.create = function (is) {
    return tars.User_t._readFrom(is);
};

tars.Result_t = function() {
    this.id = 0;
    this.iLevel = 0;
    this._classname = "tars.Result_t";
};
tars.Result_t._classname = "tars.Result_t";
tars.Result_t._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.Result_t._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.Result_t._readFrom = function (is) {
    var tmp = new tars.Result_t();
    tmp.id = is.readInt32(0, false, 0);
    tmp.iLevel = is.readInt32(1, false, 0);
    return tmp;
};
tars.Result_t.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
    os.writeInt32(1, this.iLevel);
};
tars.Result_t.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.Result_t.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.Result_t.prototype.toObject = function() { 
    return {
        "id" : this.id,
        "iLevel" : this.iLevel
    };
};
tars.Result_t.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("id") && (this.id = json.id);
    json.hasOwnProperty("iLevel") && (this.iLevel = json.iLevel);
};
tars.Result_t.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.Result_t.new = function () {
    return new tars.Result_t();
};
tars.Result_t.create = function (is) {
    return tars.Result_t._readFrom(is);
};


var __tars_NodeTars$getUsrName$EN = function (sUsrName) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, sUsrName);
    return os.getBinBuffer();
};

var __tars_NodeTars$getUsrName$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "sValue1" : is.readString(2, true, ""),
                    "sValue2" : is.readString(3, true, "")
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __tars_NodeTars$getUsrName$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

tars.NodeTarsProxy.prototype.getUsrName = function (sUsrName) {
    return this._worker.tars_invoke("getUsrName", __tars_NodeTars$getUsrName$EN(sUsrName), arguments[arguments.length - 1]).then(__tars_NodeTars$getUsrName$DE, __tars_NodeTars$getUsrName$ER);
};

var __tars_NodeTars$getall$EN = function (stUser) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, stUser);
    return os.getBinBuffer();
};

var __tars_NodeTars$getall$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "stResult" : is.readStruct(2, true, tars.Result_t)
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __tars_NodeTars$getall$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

tars.NodeTarsProxy.prototype.getall = function (stUser) {
    return this._worker.tars_invoke("getall", __tars_NodeTars$getall$EN(stUser), arguments[arguments.length - 1]).then(__tars_NodeTars$getall$DE, __tars_NodeTars$getall$ER);
};

var __tars_NodeTars$test$EN = function () {
    var os = new TarsStream.TarsOutputStream();
    return os.getBinBuffer();
};

var __tars_NodeTars$test$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __tars_NodeTars$test$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

tars.NodeTarsProxy.prototype.test = function () {
    return this._worker.tars_invoke("test", __tars_NodeTars$test$EN(), arguments[arguments.length - 1]).then(__tars_NodeTars$test$DE, __tars_NodeTars$test$ER);
};



