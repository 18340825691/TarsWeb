// **********************************************************************
// Parsed By TarsParser(1.1.0), Generated By tools(20180620)
// TarsParser Maintained By <WSRD> and tools Maintained By <superzheng>
// Generated from "Auth.tars" by Client Mode
// **********************************************************************

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var tars = tars || {};
module.exports.tars = tars;

tars.AuthProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
};

tars.AuthProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

tars.AuthProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};


tars.AUTH_STATE = {
    "AUTH_INIT" : -127,
    "AUTH_SUCC" : 0,
    "AUTH_WAIT_RSP" : 127,
    "AUTH_PROTO_ERR" : -100,
    "AUTH_WRONG_OBJ" : -101,
    "AUTH_WRONG_CLIENT" : -102,
    "AUTH_WRONG_TOKEN" : -103,
    "AUTH_ERROR" : -104,
    "_classname" : "tars.AUTH_STATE"
};
tars.AUTH_STATE._write = function(os, tag, val) { return os.writeInt32(tag, val); };
tars.AUTH_STATE._read  = function(is, tag, def) { return is.readInt32(tag, true, def); };
tars.AUTH_TYPE = {
    "AUTH_TYPENONE" : 0,
    "AUTH_TYPEREMOTE" : 1,
    "_classname" : "tars.AUTH_TYPE"
};
tars.AUTH_TYPE._write = function(os, tag, val) { return os.writeInt32(tag, val); };
tars.AUTH_TYPE._read  = function(is, tag, def) { return is.readInt32(tag, true, def); };

tars.TokenKey = function() {
    this.sApplication = "";
    this.sServer = "";
    this.sObjName = "";
    this._classname = "tars.TokenKey";
};
tars.TokenKey._classname = "tars.TokenKey";
tars.TokenKey._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.TokenKey._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.TokenKey._readFrom = function (is) {
    var tmp = new tars.TokenKey();
    tmp.sApplication = is.readString(1, true, "");
    tmp.sServer = is.readString(2, true, "");
    tmp.sObjName = is.readString(3, true, "");
    return tmp;
};
tars.TokenKey.prototype._writeTo = function (os) {
    os.writeString(1, this.sApplication);
    os.writeString(2, this.sServer);
    os.writeString(3, this.sObjName);
};
tars.TokenKey.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.TokenKey.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.TokenKey.prototype.toObject = function() { 
    return {
        "sApplication" : this.sApplication,
        "sServer" : this.sServer,
        "sObjName" : this.sObjName
    };
};
tars.TokenKey.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("sApplication") && (this.sApplication = json.sApplication);
    json.hasOwnProperty("sServer") && (this.sServer = json.sServer);
    json.hasOwnProperty("sObjName") && (this.sObjName = json.sObjName);
};
tars.TokenKey.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.TokenKey.new = function () {
    return new tars.TokenKey();
};
tars.TokenKey.create = function (is) {
    return tars.TokenKey._readFrom(is);
};

tars.AuthRequest = function() {
    this.sApplication = "";
    this.sServer = "";
    this.sToken = "";
    this._classname = "tars.AuthRequest";
};
tars.AuthRequest._classname = "tars.AuthRequest";
tars.AuthRequest._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.AuthRequest._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.AuthRequest._readFrom = function (is) {
    var tmp = new tars.AuthRequest();
    tmp.sApplication = is.readString(1, true, "");
    tmp.sServer = is.readString(2, true, "");
    tmp.sToken = is.readString(3, true, "");
    return tmp;
};
tars.AuthRequest.prototype._writeTo = function (os) {
    os.writeString(1, this.sApplication);
    os.writeString(2, this.sServer);
    os.writeString(3, this.sToken);
};
tars.AuthRequest.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.AuthRequest.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.AuthRequest.prototype.toObject = function() { 
    return {
        "sApplication" : this.sApplication,
        "sServer" : this.sServer,
        "sToken" : this.sToken
    };
};
tars.AuthRequest.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("sApplication") && (this.sApplication = json.sApplication);
    json.hasOwnProperty("sServer") && (this.sServer = json.sServer);
    json.hasOwnProperty("sToken") && (this.sToken = json.sToken);
};
tars.AuthRequest.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.AuthRequest.new = function () {
    return new tars.AuthRequest();
};
tars.AuthRequest.create = function (is) {
    return tars.AuthRequest._readFrom(is);
};

tars.TokenRequest = function() {
    this.vObjName = new TarsStream.List(TarsStream.String);
    this._classname = "tars.TokenRequest";
};
tars.TokenRequest._classname = "tars.TokenRequest";
tars.TokenRequest._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.TokenRequest._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.TokenRequest._readFrom = function (is) {
    var tmp = new tars.TokenRequest();
    tmp.vObjName = is.readList(1, true, TarsStream.List(TarsStream.String));
    return tmp;
};
tars.TokenRequest.prototype._writeTo = function (os) {
    os.writeList(1, this.vObjName);
};
tars.TokenRequest.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.TokenRequest.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.TokenRequest.prototype.toObject = function() { 
    return {
        "vObjName" : this.vObjName.toObject()
    };
};
tars.TokenRequest.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("vObjName") && (this.vObjName.readFromObject(json.vObjName));
};
tars.TokenRequest.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.TokenRequest.new = function () {
    return new tars.TokenRequest();
};
tars.TokenRequest.create = function (is) {
    return tars.TokenRequest._readFrom(is);
};

tars.TokenResponse = function() {
    this.sObjName = "";
    this.mTokens = new TarsStream.Map(TarsStream.String, TarsStream.String);
    this._classname = "tars.TokenResponse";
};
tars.TokenResponse._classname = "tars.TokenResponse";
tars.TokenResponse._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.TokenResponse._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.TokenResponse._readFrom = function (is) {
    var tmp = new tars.TokenResponse();
    tmp.sObjName = is.readString(1, true, "");
    tmp.mTokens = is.readMap(2, true, TarsStream.Map(TarsStream.String, TarsStream.String));
    return tmp;
};
tars.TokenResponse.prototype._writeTo = function (os) {
    os.writeString(1, this.sObjName);
    os.writeMap(2, this.mTokens);
};
tars.TokenResponse.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.TokenResponse.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.TokenResponse.prototype.toObject = function() { 
    return {
        "sObjName" : this.sObjName,
        "mTokens" : this.mTokens.toObject()
    };
};
tars.TokenResponse.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("sObjName") && (this.sObjName = json.sObjName);
    json.hasOwnProperty("mTokens") && (this.mTokens.readFromObject(json.mTokens));
};
tars.TokenResponse.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.TokenResponse.new = function () {
    return new tars.TokenResponse();
};
tars.TokenResponse.create = function (is) {
    return tars.TokenResponse._readFrom(is);
};

tars.ApplyTokenRequest = function() {
    this.sKey = new tars.TokenKey;
    this._classname = "tars.ApplyTokenRequest";
};
tars.ApplyTokenRequest._classname = "tars.ApplyTokenRequest";
tars.ApplyTokenRequest._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.ApplyTokenRequest._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.ApplyTokenRequest._readFrom = function (is) {
    var tmp = new tars.ApplyTokenRequest();
    tmp.sKey = is.readStruct(1, true, tars.TokenKey);
    return tmp;
};
tars.ApplyTokenRequest.prototype._writeTo = function (os) {
    os.writeStruct(1, this.sKey);
};
tars.ApplyTokenRequest.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.ApplyTokenRequest.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.ApplyTokenRequest.prototype.toObject = function() { 
    return {
        "sKey" : this.sKey.toObject()
    };
};
tars.ApplyTokenRequest.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("sKey") && (this.sKey.readFromObject(json.sKey));
};
tars.ApplyTokenRequest.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.ApplyTokenRequest.new = function () {
    return new tars.ApplyTokenRequest();
};
tars.ApplyTokenRequest.create = function (is) {
    return tars.ApplyTokenRequest._readFrom(is);
};

tars.ApplyTokenResponse = function() {
    this.sKey = new tars.TokenKey;
    this.sToken = "";
    this._classname = "tars.ApplyTokenResponse";
};
tars.ApplyTokenResponse._classname = "tars.ApplyTokenResponse";
tars.ApplyTokenResponse._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.ApplyTokenResponse._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.ApplyTokenResponse._readFrom = function (is) {
    var tmp = new tars.ApplyTokenResponse();
    tmp.sKey = is.readStruct(1, true, tars.TokenKey);
    tmp.sToken = is.readString(2, true, "");
    return tmp;
};
tars.ApplyTokenResponse.prototype._writeTo = function (os) {
    os.writeStruct(1, this.sKey);
    os.writeString(2, this.sToken);
};
tars.ApplyTokenResponse.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.ApplyTokenResponse.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.ApplyTokenResponse.prototype.toObject = function() { 
    return {
        "sKey" : this.sKey.toObject(),
        "sToken" : this.sToken
    };
};
tars.ApplyTokenResponse.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("sKey") && (this.sKey.readFromObject(json.sKey));
    json.hasOwnProperty("sToken") && (this.sToken = json.sToken);
};
tars.ApplyTokenResponse.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.ApplyTokenResponse.new = function () {
    return new tars.ApplyTokenResponse();
};
tars.ApplyTokenResponse.create = function (is) {
    return tars.ApplyTokenResponse._readFrom(is);
};

tars.DeleteTokenRequest = function() {
    this.sKey = new tars.TokenKey;
    this._classname = "tars.DeleteTokenRequest";
};
tars.DeleteTokenRequest._classname = "tars.DeleteTokenRequest";
tars.DeleteTokenRequest._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.DeleteTokenRequest._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.DeleteTokenRequest._readFrom = function (is) {
    var tmp = new tars.DeleteTokenRequest();
    tmp.sKey = is.readStruct(1, true, tars.TokenKey);
    return tmp;
};
tars.DeleteTokenRequest.prototype._writeTo = function (os) {
    os.writeStruct(1, this.sKey);
};
tars.DeleteTokenRequest.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
tars.DeleteTokenRequest.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.DeleteTokenRequest.prototype.toObject = function() { 
    return {
        "sKey" : this.sKey.toObject()
    };
};
tars.DeleteTokenRequest.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("sKey") && (this.sKey.readFromObject(json.sKey));
};
tars.DeleteTokenRequest.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.DeleteTokenRequest.new = function () {
    return new tars.DeleteTokenRequest();
};
tars.DeleteTokenRequest.create = function (is) {
    return tars.DeleteTokenRequest._readFrom(is);
};


var __tars_Auth$applyToken$EN = function (request) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, request);
    return os.getBinBuffer();
};

var __tars_Auth$applyToken$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readStruct(0, true, tars.ApplyTokenResponse)
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __tars_Auth$applyToken$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

tars.AuthProxy.prototype.applyToken = function (request) {
    return this._worker.tars_invoke("applyToken", __tars_Auth$applyToken$EN(request), arguments[arguments.length - 1]).then(__tars_Auth$applyToken$DE, __tars_Auth$applyToken$ER);
};

var __tars_Auth$authProcess$EN = function (request) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, request);
    return os.getBinBuffer();
};

var __tars_Auth$authProcess$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __tars_Auth$authProcess$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

tars.AuthProxy.prototype.authProcess = function (request) {
    return this._worker.tars_invoke("authProcess", __tars_Auth$authProcess$EN(request), arguments[arguments.length - 1]).then(__tars_Auth$authProcess$DE, __tars_Auth$authProcess$ER);
};

var __tars_Auth$deleteToken$EN = function (request) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, request);
    return os.getBinBuffer();
};

var __tars_Auth$deleteToken$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __tars_Auth$deleteToken$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

tars.AuthProxy.prototype.deleteToken = function (request) {
    return this._worker.tars_invoke("deleteToken", __tars_Auth$deleteToken$EN(request), arguments[arguments.length - 1]).then(__tars_Auth$deleteToken$DE, __tars_Auth$deleteToken$ER);
};

var __tars_Auth$getTokens$EN = function (request) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, request);
    return os.getBinBuffer();
};

var __tars_Auth$getTokens$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readList(0, true, TarsStream.List(tars.TokenResponse))
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __tars_Auth$getTokens$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

tars.AuthProxy.prototype.getTokens = function (request) {
    return this._worker.tars_invoke("getTokens", __tars_Auth$getTokens$EN(request), arguments[arguments.length - 1]).then(__tars_Auth$getTokens$DE, __tars_Auth$getTokens$ER);
};



