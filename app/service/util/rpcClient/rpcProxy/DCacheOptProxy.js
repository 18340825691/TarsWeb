// **********************************************************************
// Parsed By TarsParser(1.1.0), Generated By tools(20180620)
// TarsParser Maintained By <WSRD> and tools Maintained By <superzheng>
// Generated from "DCacheOpt.tars" by Client Mode
// **********************************************************************

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var DCache = DCache || {};
module.exports.DCache = DCache;

DCache.DCacheOptProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
};

DCache.DCacheOptProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

DCache.DCacheOptProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};


DCache.UninstallType = {
    "SERVER" : 0,
    "GROUP" : 1,
    "MODULE" : 2,
    "QUOTA_SERVER" : 3,
    "_classname" : "DCache.UninstallType"
};
DCache.UninstallType._write = function(os, tag, val) { return os.writeInt32(tag, val); };
DCache.UninstallType._read  = function(is, tag, def) { return is.readInt32(tag, true, def); };
DCache.DCacheType = {
    "KVCACHE" : 1,
    "MKVCACHE" : 2,
    "_classname" : "DCache.DCacheType"
};
DCache.DCacheType._write = function(os, tag, val) { return os.writeInt32(tag, val); };
DCache.DCacheType._read  = function(is, tag, def) { return is.readInt32(tag, true, def); };

DCache.RouterParam = function() {
    this.installRouter = true;
    this.serverName = "";
    this.appName = "";
    this.serverIp = new TarsStream.List(TarsStream.String);
    this.templateFile = "";
    this.dbName = "";
    this.dbIp = "";
    this.dbPort = "";
    this.dbUser = "";
    this.dbPwd = "";
    this.remark = "";
    this._classname = "DCache.RouterParam";
};
DCache.RouterParam._classname = "DCache.RouterParam";
DCache.RouterParam._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.RouterParam._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.RouterParam._readFrom = function (is) {
    var tmp = new DCache.RouterParam();
    tmp.installRouter = is.readBoolean(0, true, true);
    tmp.serverName = is.readString(1, true, "");
    tmp.appName = is.readString(2, true, "");
    tmp.serverIp = is.readList(3, true, TarsStream.List(TarsStream.String));
    tmp.templateFile = is.readString(4, true, "");
    tmp.dbName = is.readString(5, true, "");
    tmp.dbIp = is.readString(6, true, "");
    tmp.dbPort = is.readString(7, true, "");
    tmp.dbUser = is.readString(8, true, "");
    tmp.dbPwd = is.readString(9, true, "");
    tmp.remark = is.readString(10, true, "");
    return tmp;
};
DCache.RouterParam.prototype._writeTo = function (os) {
    os.writeBoolean(0, this.installRouter);
    os.writeString(1, this.serverName);
    os.writeString(2, this.appName);
    os.writeList(3, this.serverIp);
    os.writeString(4, this.templateFile);
    os.writeString(5, this.dbName);
    os.writeString(6, this.dbIp);
    os.writeString(7, this.dbPort);
    os.writeString(8, this.dbUser);
    os.writeString(9, this.dbPwd);
    os.writeString(10, this.remark);
};
DCache.RouterParam.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.RouterParam.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.RouterParam.prototype.toObject = function() { 
    return {
        "installRouter" : this.installRouter,
        "serverName" : this.serverName,
        "appName" : this.appName,
        "serverIp" : this.serverIp.toObject(),
        "templateFile" : this.templateFile,
        "dbName" : this.dbName,
        "dbIp" : this.dbIp,
        "dbPort" : this.dbPort,
        "dbUser" : this.dbUser,
        "dbPwd" : this.dbPwd,
        "remark" : this.remark
    };
};
DCache.RouterParam.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("installRouter") && (this.installRouter = json.installRouter);
    json.hasOwnProperty("serverName") && (this.serverName = json.serverName);
    json.hasOwnProperty("appName") && (this.appName = json.appName);
    json.hasOwnProperty("serverIp") && (this.serverIp.readFromObject(json.serverIp));
    json.hasOwnProperty("templateFile") && (this.templateFile = json.templateFile);
    json.hasOwnProperty("dbName") && (this.dbName = json.dbName);
    json.hasOwnProperty("dbIp") && (this.dbIp = json.dbIp);
    json.hasOwnProperty("dbPort") && (this.dbPort = json.dbPort);
    json.hasOwnProperty("dbUser") && (this.dbUser = json.dbUser);
    json.hasOwnProperty("dbPwd") && (this.dbPwd = json.dbPwd);
    json.hasOwnProperty("remark") && (this.remark = json.remark);
};
DCache.RouterParam.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.RouterParam.new = function () {
    return new DCache.RouterParam();
};
DCache.RouterParam.create = function (is) {
    return DCache.RouterParam._readFrom(is);
};

DCache.ProxyAddr = function() {
    this.ip = "";
    this.idcArea = "";
    this._classname = "DCache.ProxyAddr";
};
DCache.ProxyAddr._classname = "DCache.ProxyAddr";
DCache.ProxyAddr._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.ProxyAddr._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.ProxyAddr._readFrom = function (is) {
    var tmp = new DCache.ProxyAddr();
    tmp.ip = is.readString(0, true, "");
    tmp.idcArea = is.readString(1, true, "");
    return tmp;
};
DCache.ProxyAddr.prototype._writeTo = function (os) {
    os.writeString(0, this.ip);
    os.writeString(1, this.idcArea);
};
DCache.ProxyAddr.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.ProxyAddr.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.ProxyAddr.prototype.toObject = function() { 
    return {
        "ip" : this.ip,
        "idcArea" : this.idcArea
    };
};
DCache.ProxyAddr.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("ip") && (this.ip = json.ip);
    json.hasOwnProperty("idcArea") && (this.idcArea = json.idcArea);
};
DCache.ProxyAddr.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.ProxyAddr.new = function () {
    return new DCache.ProxyAddr();
};
DCache.ProxyAddr.create = function (is) {
    return DCache.ProxyAddr._readFrom(is);
};

DCache.ProxyParam = function() {
    this.installProxy = true;
    this.serverName = "";
    this.appName = "";
    this.serverIp = new TarsStream.List(DCache.ProxyAddr);
    this.templateFile = "";
    this._classname = "DCache.ProxyParam";
};
DCache.ProxyParam._classname = "DCache.ProxyParam";
DCache.ProxyParam._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.ProxyParam._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.ProxyParam._readFrom = function (is) {
    var tmp = new DCache.ProxyParam();
    tmp.installProxy = is.readBoolean(0, true, true);
    tmp.serverName = is.readString(1, true, "");
    tmp.appName = is.readString(2, true, "");
    tmp.serverIp = is.readList(3, true, TarsStream.List(DCache.ProxyAddr));
    tmp.templateFile = is.readString(4, true, "");
    return tmp;
};
DCache.ProxyParam.prototype._writeTo = function (os) {
    os.writeBoolean(0, this.installProxy);
    os.writeString(1, this.serverName);
    os.writeString(2, this.appName);
    os.writeList(3, this.serverIp);
    os.writeString(4, this.templateFile);
};
DCache.ProxyParam.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.ProxyParam.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.ProxyParam.prototype.toObject = function() { 
    return {
        "installProxy" : this.installProxy,
        "serverName" : this.serverName,
        "appName" : this.appName,
        "serverIp" : this.serverIp.toObject(),
        "templateFile" : this.templateFile
    };
};
DCache.ProxyParam.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("installProxy") && (this.installProxy = json.installProxy);
    json.hasOwnProperty("serverName") && (this.serverName = json.serverName);
    json.hasOwnProperty("appName") && (this.appName = json.appName);
    json.hasOwnProperty("serverIp") && (this.serverIp.readFromObject(json.serverIp));
    json.hasOwnProperty("templateFile") && (this.templateFile = json.templateFile);
};
DCache.ProxyParam.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.ProxyParam.new = function () {
    return new DCache.ProxyParam();
};
DCache.ProxyParam.create = function (is) {
    return DCache.ProxyParam._readFrom(is);
};

DCache.InstallAppReq = function() {
    this.appName = "";
    this.routerParam = new DCache.RouterParam;
    this.proxyParam = new DCache.ProxyParam;
    this.version = "";
    this.replace = false;
    this._classname = "DCache.InstallAppReq";
};
DCache.InstallAppReq._classname = "DCache.InstallAppReq";
DCache.InstallAppReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.InstallAppReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.InstallAppReq._readFrom = function (is) {
    var tmp = new DCache.InstallAppReq();
    tmp.appName = is.readString(0, true, "");
    tmp.routerParam = is.readStruct(1, true, DCache.RouterParam);
    tmp.proxyParam = is.readStruct(2, true, DCache.ProxyParam);
    tmp.version = is.readString(3, true, "");
    tmp.replace = is.readBoolean(4, true, false);
    return tmp;
};
DCache.InstallAppReq.prototype._writeTo = function (os) {
    os.writeString(0, this.appName);
    os.writeStruct(1, this.routerParam);
    os.writeStruct(2, this.proxyParam);
    os.writeString(3, this.version);
    os.writeBoolean(4, this.replace);
};
DCache.InstallAppReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.InstallAppReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.InstallAppReq.prototype.toObject = function() { 
    return {
        "appName" : this.appName,
        "routerParam" : this.routerParam.toObject(),
        "proxyParam" : this.proxyParam.toObject(),
        "version" : this.version,
        "replace" : this.replace
    };
};
DCache.InstallAppReq.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("appName") && (this.appName = json.appName);
    json.hasOwnProperty("routerParam") && (this.routerParam.readFromObject(json.routerParam));
    json.hasOwnProperty("proxyParam") && (this.proxyParam.readFromObject(json.proxyParam));
    json.hasOwnProperty("version") && (this.version = json.version);
    json.hasOwnProperty("replace") && (this.replace = json.replace);
};
DCache.InstallAppReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.InstallAppReq.new = function () {
    return new DCache.InstallAppReq();
};
DCache.InstallAppReq.create = function (is) {
    return DCache.InstallAppReq._readFrom(is);
};

DCache.InstallAppRsp = function() {
    this.errMsg = "";
    this._classname = "DCache.InstallAppRsp";
};
DCache.InstallAppRsp._classname = "DCache.InstallAppRsp";
DCache.InstallAppRsp._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.InstallAppRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.InstallAppRsp._readFrom = function (is) {
    var tmp = new DCache.InstallAppRsp();
    tmp.errMsg = is.readString(0, true, "");
    return tmp;
};
DCache.InstallAppRsp.prototype._writeTo = function (os) {
    os.writeString(0, this.errMsg);
};
DCache.InstallAppRsp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.InstallAppRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.InstallAppRsp.prototype.toObject = function() { 
    return {
        "errMsg" : this.errMsg
    };
};
DCache.InstallAppRsp.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("errMsg") && (this.errMsg = json.errMsg);
};
DCache.InstallAppRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.InstallAppRsp.new = function () {
    return new DCache.InstallAppRsp();
};
DCache.InstallAppRsp.create = function (is) {
    return DCache.InstallAppRsp._readFrom(is);
};

DCache.CacheHostParam = function() {
    this.serverName = "";
    this.serverIp = "";
    this.templateFile = "";
    this.type = "";
    this.bakSrcServerName = "";
    this.idc = "";
    this.priority = "";
    this.groupName = "";
    this.shmSize = "";
    this.shmKey = "";
    this.isContainer = "";
    this.binlogPort = "";
    this.cachePort = "";
    this.wcachePort = "";
    this.backupPort = "";
    this.routerPort = "";
    this.controlackPort = "";
    this._classname = "DCache.CacheHostParam";
};
DCache.CacheHostParam._classname = "DCache.CacheHostParam";
DCache.CacheHostParam._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.CacheHostParam._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.CacheHostParam._readFrom = function (is) {
    var tmp = new DCache.CacheHostParam();
    tmp.serverName = is.readString(0, true, "");
    tmp.serverIp = is.readString(1, true, "");
    tmp.templateFile = is.readString(2, true, "");
    tmp.type = is.readString(3, true, "");
    tmp.bakSrcServerName = is.readString(4, true, "");
    tmp.idc = is.readString(5, true, "");
    tmp.priority = is.readString(6, true, "");
    tmp.groupName = is.readString(7, true, "");
    tmp.shmSize = is.readString(8, true, "");
    tmp.shmKey = is.readString(9, true, "");
    tmp.isContainer = is.readString(10, true, "");
    tmp.binlogPort = is.readString(11, false, "");
    tmp.cachePort = is.readString(12, false, "");
    tmp.wcachePort = is.readString(13, false, "");
    tmp.backupPort = is.readString(14, false, "");
    tmp.routerPort = is.readString(15, false, "");
    tmp.controlackPort = is.readString(16, false, "");
    return tmp;
};
DCache.CacheHostParam.prototype._writeTo = function (os) {
    os.writeString(0, this.serverName);
    os.writeString(1, this.serverIp);
    os.writeString(2, this.templateFile);
    os.writeString(3, this.type);
    os.writeString(4, this.bakSrcServerName);
    os.writeString(5, this.idc);
    os.writeString(6, this.priority);
    os.writeString(7, this.groupName);
    os.writeString(8, this.shmSize);
    os.writeString(9, this.shmKey);
    os.writeString(10, this.isContainer);
    os.writeString(11, this.binlogPort);
    os.writeString(12, this.cachePort);
    os.writeString(13, this.wcachePort);
    os.writeString(14, this.backupPort);
    os.writeString(15, this.routerPort);
    os.writeString(16, this.controlackPort);
};
DCache.CacheHostParam.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.CacheHostParam.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.CacheHostParam.prototype.toObject = function() { 
    return {
        "serverName" : this.serverName,
        "serverIp" : this.serverIp,
        "templateFile" : this.templateFile,
        "type" : this.type,
        "bakSrcServerName" : this.bakSrcServerName,
        "idc" : this.idc,
        "priority" : this.priority,
        "groupName" : this.groupName,
        "shmSize" : this.shmSize,
        "shmKey" : this.shmKey,
        "isContainer" : this.isContainer,
        "binlogPort" : this.binlogPort,
        "cachePort" : this.cachePort,
        "wcachePort" : this.wcachePort,
        "backupPort" : this.backupPort,
        "routerPort" : this.routerPort,
        "controlackPort" : this.controlackPort
    };
};
DCache.CacheHostParam.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("serverName") && (this.serverName = json.serverName);
    json.hasOwnProperty("serverIp") && (this.serverIp = json.serverIp);
    json.hasOwnProperty("templateFile") && (this.templateFile = json.templateFile);
    json.hasOwnProperty("type") && (this.type = json.type);
    json.hasOwnProperty("bakSrcServerName") && (this.bakSrcServerName = json.bakSrcServerName);
    json.hasOwnProperty("idc") && (this.idc = json.idc);
    json.hasOwnProperty("priority") && (this.priority = json.priority);
    json.hasOwnProperty("groupName") && (this.groupName = json.groupName);
    json.hasOwnProperty("shmSize") && (this.shmSize = json.shmSize);
    json.hasOwnProperty("shmKey") && (this.shmKey = json.shmKey);
    json.hasOwnProperty("isContainer") && (this.isContainer = json.isContainer);
    json.hasOwnProperty("binlogPort") && (this.binlogPort = json.binlogPort);
    json.hasOwnProperty("cachePort") && (this.cachePort = json.cachePort);
    json.hasOwnProperty("wcachePort") && (this.wcachePort = json.wcachePort);
    json.hasOwnProperty("backupPort") && (this.backupPort = json.backupPort);
    json.hasOwnProperty("routerPort") && (this.routerPort = json.routerPort);
    json.hasOwnProperty("controlackPort") && (this.controlackPort = json.controlackPort);
};
DCache.CacheHostParam.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.CacheHostParam.new = function () {
    return new DCache.CacheHostParam();
};
DCache.CacheHostParam.create = function (is) {
    return DCache.CacheHostParam._readFrom(is);
};

DCache.SingleKeyConfParam = function() {
    this.avgDataSize = "";
    this.readDbFlag = "";
    this.enableErase = "";
    this.eraseRadio = "";
    this.saveOnlyKey = "";
    this.dbFlag = "";
    this.dbAccessServant = "";
    this.startExpireThread = "";
    this.expireDb = "";
    this.hotBackupDays = "";
    this.coldBackupDays = "";
    this._classname = "DCache.SingleKeyConfParam";
};
DCache.SingleKeyConfParam._classname = "DCache.SingleKeyConfParam";
DCache.SingleKeyConfParam._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.SingleKeyConfParam._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.SingleKeyConfParam._readFrom = function (is) {
    var tmp = new DCache.SingleKeyConfParam();
    tmp.avgDataSize = is.readString(0, true, "");
    tmp.readDbFlag = is.readString(1, true, "");
    tmp.enableErase = is.readString(2, true, "");
    tmp.eraseRadio = is.readString(3, true, "");
    tmp.saveOnlyKey = is.readString(4, true, "");
    tmp.dbFlag = is.readString(5, true, "");
    tmp.dbAccessServant = is.readString(6, true, "");
    tmp.startExpireThread = is.readString(7, true, "");
    tmp.expireDb = is.readString(8, true, "");
    tmp.hotBackupDays = is.readString(9, false, "");
    tmp.coldBackupDays = is.readString(10, false, "");
    return tmp;
};
DCache.SingleKeyConfParam.prototype._writeTo = function (os) {
    os.writeString(0, this.avgDataSize);
    os.writeString(1, this.readDbFlag);
    os.writeString(2, this.enableErase);
    os.writeString(3, this.eraseRadio);
    os.writeString(4, this.saveOnlyKey);
    os.writeString(5, this.dbFlag);
    os.writeString(6, this.dbAccessServant);
    os.writeString(7, this.startExpireThread);
    os.writeString(8, this.expireDb);
    os.writeString(9, this.hotBackupDays);
    os.writeString(10, this.coldBackupDays);
};
DCache.SingleKeyConfParam.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.SingleKeyConfParam.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.SingleKeyConfParam.prototype.toObject = function() { 
    return {
        "avgDataSize" : this.avgDataSize,
        "readDbFlag" : this.readDbFlag,
        "enableErase" : this.enableErase,
        "eraseRadio" : this.eraseRadio,
        "saveOnlyKey" : this.saveOnlyKey,
        "dbFlag" : this.dbFlag,
        "dbAccessServant" : this.dbAccessServant,
        "startExpireThread" : this.startExpireThread,
        "expireDb" : this.expireDb,
        "hotBackupDays" : this.hotBackupDays,
        "coldBackupDays" : this.coldBackupDays
    };
};
DCache.SingleKeyConfParam.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("avgDataSize") && (this.avgDataSize = json.avgDataSize);
    json.hasOwnProperty("readDbFlag") && (this.readDbFlag = json.readDbFlag);
    json.hasOwnProperty("enableErase") && (this.enableErase = json.enableErase);
    json.hasOwnProperty("eraseRadio") && (this.eraseRadio = json.eraseRadio);
    json.hasOwnProperty("saveOnlyKey") && (this.saveOnlyKey = json.saveOnlyKey);
    json.hasOwnProperty("dbFlag") && (this.dbFlag = json.dbFlag);
    json.hasOwnProperty("dbAccessServant") && (this.dbAccessServant = json.dbAccessServant);
    json.hasOwnProperty("startExpireThread") && (this.startExpireThread = json.startExpireThread);
    json.hasOwnProperty("expireDb") && (this.expireDb = json.expireDb);
    json.hasOwnProperty("hotBackupDays") && (this.hotBackupDays = json.hotBackupDays);
    json.hasOwnProperty("coldBackupDays") && (this.coldBackupDays = json.coldBackupDays);
};
DCache.SingleKeyConfParam.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.SingleKeyConfParam.new = function () {
    return new DCache.SingleKeyConfParam();
};
DCache.SingleKeyConfParam.create = function (is) {
    return DCache.SingleKeyConfParam._readFrom(is);
};

DCache.MultiKeyConfParam = function() {
    this.avgDataSize = "";
    this.readDbFlag = "";
    this.enableErase = "";
    this.eraseRadio = "";
    this.saveOnlyKey = "";
    this.dbFlag = "";
    this.dbAccessServant = "";
    this.startExpireThread = "";
    this.expireDb = "";
    this.cacheType = "";
    this.hotBackupDays = "";
    this.coldBackupDays = "";
    this._classname = "DCache.MultiKeyConfParam";
};
DCache.MultiKeyConfParam._classname = "DCache.MultiKeyConfParam";
DCache.MultiKeyConfParam._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.MultiKeyConfParam._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.MultiKeyConfParam._readFrom = function (is) {
    var tmp = new DCache.MultiKeyConfParam();
    tmp.avgDataSize = is.readString(0, true, "");
    tmp.readDbFlag = is.readString(1, true, "");
    tmp.enableErase = is.readString(2, true, "");
    tmp.eraseRadio = is.readString(3, true, "");
    tmp.saveOnlyKey = is.readString(4, true, "");
    tmp.dbFlag = is.readString(5, true, "");
    tmp.dbAccessServant = is.readString(6, true, "");
    tmp.startExpireThread = is.readString(7, true, "");
    tmp.expireDb = is.readString(8, true, "");
    tmp.cacheType = is.readString(9, true, "");
    tmp.hotBackupDays = is.readString(10, false, "");
    tmp.coldBackupDays = is.readString(11, false, "");
    return tmp;
};
DCache.MultiKeyConfParam.prototype._writeTo = function (os) {
    os.writeString(0, this.avgDataSize);
    os.writeString(1, this.readDbFlag);
    os.writeString(2, this.enableErase);
    os.writeString(3, this.eraseRadio);
    os.writeString(4, this.saveOnlyKey);
    os.writeString(5, this.dbFlag);
    os.writeString(6, this.dbAccessServant);
    os.writeString(7, this.startExpireThread);
    os.writeString(8, this.expireDb);
    os.writeString(9, this.cacheType);
    os.writeString(10, this.hotBackupDays);
    os.writeString(11, this.coldBackupDays);
};
DCache.MultiKeyConfParam.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.MultiKeyConfParam.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.MultiKeyConfParam.prototype.toObject = function() { 
    return {
        "avgDataSize" : this.avgDataSize,
        "readDbFlag" : this.readDbFlag,
        "enableErase" : this.enableErase,
        "eraseRadio" : this.eraseRadio,
        "saveOnlyKey" : this.saveOnlyKey,
        "dbFlag" : this.dbFlag,
        "dbAccessServant" : this.dbAccessServant,
        "startExpireThread" : this.startExpireThread,
        "expireDb" : this.expireDb,
        "cacheType" : this.cacheType,
        "hotBackupDays" : this.hotBackupDays,
        "coldBackupDays" : this.coldBackupDays
    };
};
DCache.MultiKeyConfParam.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("avgDataSize") && (this.avgDataSize = json.avgDataSize);
    json.hasOwnProperty("readDbFlag") && (this.readDbFlag = json.readDbFlag);
    json.hasOwnProperty("enableErase") && (this.enableErase = json.enableErase);
    json.hasOwnProperty("eraseRadio") && (this.eraseRadio = json.eraseRadio);
    json.hasOwnProperty("saveOnlyKey") && (this.saveOnlyKey = json.saveOnlyKey);
    json.hasOwnProperty("dbFlag") && (this.dbFlag = json.dbFlag);
    json.hasOwnProperty("dbAccessServant") && (this.dbAccessServant = json.dbAccessServant);
    json.hasOwnProperty("startExpireThread") && (this.startExpireThread = json.startExpireThread);
    json.hasOwnProperty("expireDb") && (this.expireDb = json.expireDb);
    json.hasOwnProperty("cacheType") && (this.cacheType = json.cacheType);
    json.hasOwnProperty("hotBackupDays") && (this.hotBackupDays = json.hotBackupDays);
    json.hasOwnProperty("coldBackupDays") && (this.coldBackupDays = json.coldBackupDays);
};
DCache.MultiKeyConfParam.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.MultiKeyConfParam.new = function () {
    return new DCache.MultiKeyConfParam();
};
DCache.MultiKeyConfParam.create = function (is) {
    return DCache.MultiKeyConfParam._readFrom(is);
};

DCache.RecordParam = function() {
    this.fieldName = "";
    this.keyType = "";
    this.dataType = "";
    this.property = "";
    this.defaultValue = "";
    this.maxLen = 0;
    this._classname = "DCache.RecordParam";
};
DCache.RecordParam._classname = "DCache.RecordParam";
DCache.RecordParam._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.RecordParam._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.RecordParam._readFrom = function (is) {
    var tmp = new DCache.RecordParam();
    tmp.fieldName = is.readString(0, true, "");
    tmp.keyType = is.readString(1, true, "");
    tmp.dataType = is.readString(2, true, "");
    tmp.property = is.readString(3, true, "");
    tmp.defaultValue = is.readString(4, true, "");
    tmp.maxLen = is.readInt32(5, true, 0);
    return tmp;
};
DCache.RecordParam.prototype._writeTo = function (os) {
    os.writeString(0, this.fieldName);
    os.writeString(1, this.keyType);
    os.writeString(2, this.dataType);
    os.writeString(3, this.property);
    os.writeString(4, this.defaultValue);
    os.writeInt32(5, this.maxLen);
};
DCache.RecordParam.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.RecordParam.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.RecordParam.prototype.toObject = function() { 
    return {
        "fieldName" : this.fieldName,
        "keyType" : this.keyType,
        "dataType" : this.dataType,
        "property" : this.property,
        "defaultValue" : this.defaultValue,
        "maxLen" : this.maxLen
    };
};
DCache.RecordParam.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("fieldName") && (this.fieldName = json.fieldName);
    json.hasOwnProperty("keyType") && (this.keyType = json.keyType);
    json.hasOwnProperty("dataType") && (this.dataType = json.dataType);
    json.hasOwnProperty("property") && (this.property = json.property);
    json.hasOwnProperty("defaultValue") && (this.defaultValue = json.defaultValue);
    json.hasOwnProperty("maxLen") && (this.maxLen = json.maxLen);
};
DCache.RecordParam.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.RecordParam.new = function () {
    return new DCache.RecordParam();
};
DCache.RecordParam.create = function (is) {
    return DCache.RecordParam._readFrom(is);
};

DCache.RouterConsistRes = function() {
    this.iFlag = 0;
    this.sInfo = "";
    this._classname = "DCache.RouterConsistRes";
};
DCache.RouterConsistRes._classname = "DCache.RouterConsistRes";
DCache.RouterConsistRes._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.RouterConsistRes._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.RouterConsistRes._readFrom = function (is) {
    var tmp = new DCache.RouterConsistRes();
    tmp.iFlag = is.readInt32(0, true, 0);
    tmp.sInfo = is.readString(1, true, "");
    return tmp;
};
DCache.RouterConsistRes.prototype._writeTo = function (os) {
    os.writeInt32(0, this.iFlag);
    os.writeString(1, this.sInfo);
};
DCache.RouterConsistRes.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.RouterConsistRes.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.RouterConsistRes.prototype.toObject = function() { 
    return {
        "iFlag" : this.iFlag,
        "sInfo" : this.sInfo
    };
};
DCache.RouterConsistRes.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("iFlag") && (this.iFlag = json.iFlag);
    json.hasOwnProperty("sInfo") && (this.sInfo = json.sInfo);
};
DCache.RouterConsistRes.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.RouterConsistRes.new = function () {
    return new DCache.RouterConsistRes();
};
DCache.RouterConsistRes.create = function (is) {
    return DCache.RouterConsistRes._readFrom(is);
};

DCache.InstallKVCacheReq = function() {
    this.appName = "";
    this.moduleName = "";
    this.kvCacheHost = new TarsStream.List(DCache.CacheHostParam);
    this.kvCacheConf = new DCache.SingleKeyConfParam;
    this.version = "";
    this.replace = false;
    this._classname = "DCache.InstallKVCacheReq";
};
DCache.InstallKVCacheReq._classname = "DCache.InstallKVCacheReq";
DCache.InstallKVCacheReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.InstallKVCacheReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.InstallKVCacheReq._readFrom = function (is) {
    var tmp = new DCache.InstallKVCacheReq();
    tmp.appName = is.readString(0, true, "");
    tmp.moduleName = is.readString(1, true, "");
    tmp.kvCacheHost = is.readList(2, true, TarsStream.List(DCache.CacheHostParam));
    tmp.kvCacheConf = is.readStruct(3, true, DCache.SingleKeyConfParam);
    tmp.version = is.readString(4, true, "");
    tmp.replace = is.readBoolean(5, true, false);
    return tmp;
};
DCache.InstallKVCacheReq.prototype._writeTo = function (os) {
    os.writeString(0, this.appName);
    os.writeString(1, this.moduleName);
    os.writeList(2, this.kvCacheHost);
    os.writeStruct(3, this.kvCacheConf);
    os.writeString(4, this.version);
    os.writeBoolean(5, this.replace);
};
DCache.InstallKVCacheReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.InstallKVCacheReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.InstallKVCacheReq.prototype.toObject = function() { 
    return {
        "appName" : this.appName,
        "moduleName" : this.moduleName,
        "kvCacheHost" : this.kvCacheHost.toObject(),
        "kvCacheConf" : this.kvCacheConf.toObject(),
        "version" : this.version,
        "replace" : this.replace
    };
};
DCache.InstallKVCacheReq.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("appName") && (this.appName = json.appName);
    json.hasOwnProperty("moduleName") && (this.moduleName = json.moduleName);
    json.hasOwnProperty("kvCacheHost") && (this.kvCacheHost.readFromObject(json.kvCacheHost));
    json.hasOwnProperty("kvCacheConf") && (this.kvCacheConf.readFromObject(json.kvCacheConf));
    json.hasOwnProperty("version") && (this.version = json.version);
    json.hasOwnProperty("replace") && (this.replace = json.replace);
};
DCache.InstallKVCacheReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.InstallKVCacheReq.new = function () {
    return new DCache.InstallKVCacheReq();
};
DCache.InstallKVCacheReq.create = function (is) {
    return DCache.InstallKVCacheReq._readFrom(is);
};

DCache.InstallKVCacheRsp = function() {
    this.rcRes = new DCache.RouterConsistRes;
    this.errMsg = "";
    this._classname = "DCache.InstallKVCacheRsp";
};
DCache.InstallKVCacheRsp._classname = "DCache.InstallKVCacheRsp";
DCache.InstallKVCacheRsp._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.InstallKVCacheRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.InstallKVCacheRsp._readFrom = function (is) {
    var tmp = new DCache.InstallKVCacheRsp();
    tmp.rcRes = is.readStruct(0, true, DCache.RouterConsistRes);
    tmp.errMsg = is.readString(1, true, "");
    return tmp;
};
DCache.InstallKVCacheRsp.prototype._writeTo = function (os) {
    os.writeStruct(0, this.rcRes);
    os.writeString(1, this.errMsg);
};
DCache.InstallKVCacheRsp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.InstallKVCacheRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.InstallKVCacheRsp.prototype.toObject = function() { 
    return {
        "rcRes" : this.rcRes.toObject(),
        "errMsg" : this.errMsg
    };
};
DCache.InstallKVCacheRsp.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("rcRes") && (this.rcRes.readFromObject(json.rcRes));
    json.hasOwnProperty("errMsg") && (this.errMsg = json.errMsg);
};
DCache.InstallKVCacheRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.InstallKVCacheRsp.new = function () {
    return new DCache.InstallKVCacheRsp();
};
DCache.InstallKVCacheRsp.create = function (is) {
    return DCache.InstallKVCacheRsp._readFrom(is);
};

DCache.InstallMKVCacheReq = function() {
    this.appName = "";
    this.moduleName = "";
    this.mkvCacheHost = new TarsStream.List(DCache.CacheHostParam);
    this.mkvCacheConf = new DCache.MultiKeyConfParam;
    this.fieldParam = new TarsStream.List(DCache.RecordParam);
    this.version = "";
    this.replace = false;
    this._classname = "DCache.InstallMKVCacheReq";
};
DCache.InstallMKVCacheReq._classname = "DCache.InstallMKVCacheReq";
DCache.InstallMKVCacheReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.InstallMKVCacheReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.InstallMKVCacheReq._readFrom = function (is) {
    var tmp = new DCache.InstallMKVCacheReq();
    tmp.appName = is.readString(0, true, "");
    tmp.moduleName = is.readString(1, true, "");
    tmp.mkvCacheHost = is.readList(2, true, TarsStream.List(DCache.CacheHostParam));
    tmp.mkvCacheConf = is.readStruct(3, true, DCache.MultiKeyConfParam);
    tmp.fieldParam = is.readList(4, true, TarsStream.List(DCache.RecordParam));
    tmp.version = is.readString(5, true, "");
    tmp.replace = is.readBoolean(6, true, false);
    return tmp;
};
DCache.InstallMKVCacheReq.prototype._writeTo = function (os) {
    os.writeString(0, this.appName);
    os.writeString(1, this.moduleName);
    os.writeList(2, this.mkvCacheHost);
    os.writeStruct(3, this.mkvCacheConf);
    os.writeList(4, this.fieldParam);
    os.writeString(5, this.version);
    os.writeBoolean(6, this.replace);
};
DCache.InstallMKVCacheReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.InstallMKVCacheReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.InstallMKVCacheReq.prototype.toObject = function() { 
    return {
        "appName" : this.appName,
        "moduleName" : this.moduleName,
        "mkvCacheHost" : this.mkvCacheHost.toObject(),
        "mkvCacheConf" : this.mkvCacheConf.toObject(),
        "fieldParam" : this.fieldParam.toObject(),
        "version" : this.version,
        "replace" : this.replace
    };
};
DCache.InstallMKVCacheReq.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("appName") && (this.appName = json.appName);
    json.hasOwnProperty("moduleName") && (this.moduleName = json.moduleName);
    json.hasOwnProperty("mkvCacheHost") && (this.mkvCacheHost.readFromObject(json.mkvCacheHost));
    json.hasOwnProperty("mkvCacheConf") && (this.mkvCacheConf.readFromObject(json.mkvCacheConf));
    json.hasOwnProperty("fieldParam") && (this.fieldParam.readFromObject(json.fieldParam));
    json.hasOwnProperty("version") && (this.version = json.version);
    json.hasOwnProperty("replace") && (this.replace = json.replace);
};
DCache.InstallMKVCacheReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.InstallMKVCacheReq.new = function () {
    return new DCache.InstallMKVCacheReq();
};
DCache.InstallMKVCacheReq.create = function (is) {
    return DCache.InstallMKVCacheReq._readFrom(is);
};

DCache.InstallMKVCacheRsp = function() {
    this.rcRes = new DCache.RouterConsistRes;
    this.errMsg = "";
    this._classname = "DCache.InstallMKVCacheRsp";
};
DCache.InstallMKVCacheRsp._classname = "DCache.InstallMKVCacheRsp";
DCache.InstallMKVCacheRsp._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.InstallMKVCacheRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.InstallMKVCacheRsp._readFrom = function (is) {
    var tmp = new DCache.InstallMKVCacheRsp();
    tmp.rcRes = is.readStruct(0, true, DCache.RouterConsistRes);
    tmp.errMsg = is.readString(1, true, "");
    return tmp;
};
DCache.InstallMKVCacheRsp.prototype._writeTo = function (os) {
    os.writeStruct(0, this.rcRes);
    os.writeString(1, this.errMsg);
};
DCache.InstallMKVCacheRsp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.InstallMKVCacheRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.InstallMKVCacheRsp.prototype.toObject = function() { 
    return {
        "rcRes" : this.rcRes.toObject(),
        "errMsg" : this.errMsg
    };
};
DCache.InstallMKVCacheRsp.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("rcRes") && (this.rcRes.readFromObject(json.rcRes));
    json.hasOwnProperty("errMsg") && (this.errMsg = json.errMsg);
};
DCache.InstallMKVCacheRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.InstallMKVCacheRsp.new = function () {
    return new DCache.InstallMKVCacheRsp();
};
DCache.InstallMKVCacheRsp.create = function (is) {
    return DCache.InstallMKVCacheRsp._readFrom(is);
};

DCache.DBInfo = function() {
    this.ip = "";
    this.user = "";
    this.pwd = "";
    this.port = "";
    this.charset = "";
    this.dbName = "";
    this._classname = "DCache.DBInfo";
};
DCache.DBInfo._classname = "DCache.DBInfo";
DCache.DBInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.DBInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.DBInfo._readFrom = function (is) {
    var tmp = new DCache.DBInfo();
    tmp.ip = is.readString(0, true, "");
    tmp.user = is.readString(1, true, "");
    tmp.pwd = is.readString(2, true, "");
    tmp.port = is.readString(3, true, "");
    tmp.charset = is.readString(4, true, "");
    tmp.dbName = is.readString(5, true, "");
    return tmp;
};
DCache.DBInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.ip);
    os.writeString(1, this.user);
    os.writeString(2, this.pwd);
    os.writeString(3, this.port);
    os.writeString(4, this.charset);
    os.writeString(5, this.dbName);
};
DCache.DBInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.DBInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.DBInfo.prototype.toObject = function() { 
    return {
        "ip" : this.ip,
        "user" : this.user,
        "pwd" : this.pwd,
        "port" : this.port,
        "charset" : this.charset,
        "dbName" : this.dbName
    };
};
DCache.DBInfo.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("ip") && (this.ip = json.ip);
    json.hasOwnProperty("user") && (this.user = json.user);
    json.hasOwnProperty("pwd") && (this.pwd = json.pwd);
    json.hasOwnProperty("port") && (this.port = json.port);
    json.hasOwnProperty("charset") && (this.charset = json.charset);
    json.hasOwnProperty("dbName") && (this.dbName = json.dbName);
};
DCache.DBInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.DBInfo.new = function () {
    return new DCache.DBInfo();
};
DCache.DBInfo.create = function (is) {
    return DCache.DBInfo._readFrom(is);
};

DCache.UninstallInfo = function() {
    this.unType = DCache.UninstallType.SERVER;
    this.moduleName = "";
    this.serverName = "";
    this.groupName = "";
    this.routerDb = new DCache.DBInfo;
    this._classname = "DCache.UninstallInfo";
};
DCache.UninstallInfo._classname = "DCache.UninstallInfo";
DCache.UninstallInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.UninstallInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.UninstallInfo._readFrom = function (is) {
    var tmp = new DCache.UninstallInfo();
    tmp.unType = is.readInt32(0, true, DCache.UninstallType.SERVER);
    tmp.moduleName = is.readString(1, true, "");
    tmp.serverName = is.readString(2, true, "");
    tmp.groupName = is.readString(3, true, "");
    tmp.routerDb = is.readStruct(4, true, DCache.DBInfo);
    return tmp;
};
DCache.UninstallInfo.prototype._writeTo = function (os) {
    os.writeInt32(0, this.unType);
    os.writeString(1, this.moduleName);
    os.writeString(2, this.serverName);
    os.writeString(3, this.groupName);
    os.writeStruct(4, this.routerDb);
};
DCache.UninstallInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.UninstallInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.UninstallInfo.prototype.toObject = function() { 
    return {
        "unType" : this.unType,
        "moduleName" : this.moduleName,
        "serverName" : this.serverName,
        "groupName" : this.groupName,
        "routerDb" : this.routerDb.toObject()
    };
};
DCache.UninstallInfo.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("unType") && (this.unType = json.unType);
    json.hasOwnProperty("moduleName") && (this.moduleName = json.moduleName);
    json.hasOwnProperty("serverName") && (this.serverName = json.serverName);
    json.hasOwnProperty("groupName") && (this.groupName = json.groupName);
    json.hasOwnProperty("routerDb") && (this.routerDb.readFromObject(json.routerDb));
};
DCache.UninstallInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.UninstallInfo.new = function () {
    return new DCache.UninstallInfo();
};
DCache.UninstallInfo.create = function (is) {
    return DCache.UninstallInfo._readFrom(is);
};

DCache.UninstallRsp = function() {
    this.errMsg = "";
    this._classname = "DCache.UninstallRsp";
};
DCache.UninstallRsp._classname = "DCache.UninstallRsp";
DCache.UninstallRsp._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.UninstallRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.UninstallRsp._readFrom = function (is) {
    var tmp = new DCache.UninstallRsp();
    tmp.errMsg = is.readString(0, true, "");
    return tmp;
};
DCache.UninstallRsp.prototype._writeTo = function (os) {
    os.writeString(0, this.errMsg);
};
DCache.UninstallRsp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.UninstallRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.UninstallRsp.prototype.toObject = function() { 
    return {
        "errMsg" : this.errMsg
    };
};
DCache.UninstallRsp.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("errMsg") && (this.errMsg = json.errMsg);
};
DCache.UninstallRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.UninstallRsp.new = function () {
    return new DCache.UninstallRsp();
};
DCache.UninstallRsp.create = function (is) {
    return DCache.UninstallRsp._readFrom(is);
};

DCache.UninstallProgressRsp = function() {
    this.percent = "";
    this.errMsg = "";
    this._classname = "DCache.UninstallProgressRsp";
};
DCache.UninstallProgressRsp._classname = "DCache.UninstallProgressRsp";
DCache.UninstallProgressRsp._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.UninstallProgressRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.UninstallProgressRsp._readFrom = function (is) {
    var tmp = new DCache.UninstallProgressRsp();
    tmp.percent = is.readString(0, true, "");
    tmp.errMsg = is.readString(1, true, "");
    return tmp;
};
DCache.UninstallProgressRsp.prototype._writeTo = function (os) {
    os.writeString(0, this.percent);
    os.writeString(1, this.errMsg);
};
DCache.UninstallProgressRsp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.UninstallProgressRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.UninstallProgressRsp.prototype.toObject = function() { 
    return {
        "percent" : this.percent,
        "errMsg" : this.errMsg
    };
};
DCache.UninstallProgressRsp.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("percent") && (this.percent = json.percent);
    json.hasOwnProperty("errMsg") && (this.errMsg = json.errMsg);
};
DCache.UninstallProgressRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.UninstallProgressRsp.new = function () {
    return new DCache.UninstallProgressRsp();
};
DCache.UninstallProgressRsp.create = function (is) {
    return DCache.UninstallProgressRsp._readFrom(is);
};

DCache.ReleaseInfo = function() {
    this.appName = "";
    this.serverName = "";
    this.nodeName = "";
    this.groupName = "";
    this.version = "";
    this.user = "";
    this.md5 = "";
    this.status = 0;
    this.error = "";
    this.ostype = "";
    this._classname = "DCache.ReleaseInfo";
};
DCache.ReleaseInfo._classname = "DCache.ReleaseInfo";
DCache.ReleaseInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.ReleaseInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.ReleaseInfo._readFrom = function (is) {
    var tmp = new DCache.ReleaseInfo();
    tmp.appName = is.readString(0, true, "");
    tmp.serverName = is.readString(1, true, "");
    tmp.nodeName = is.readString(2, true, "");
    tmp.groupName = is.readString(3, true, "");
    tmp.version = is.readString(4, true, "");
    tmp.user = is.readString(5, true, "");
    tmp.md5 = is.readString(6, true, "");
    tmp.status = is.readInt32(7, true, 0);
    tmp.error = is.readString(8, false, "");
    tmp.ostype = is.readString(9, false, "");
    return tmp;
};
DCache.ReleaseInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.appName);
    os.writeString(1, this.serverName);
    os.writeString(2, this.nodeName);
    os.writeString(3, this.groupName);
    os.writeString(4, this.version);
    os.writeString(5, this.user);
    os.writeString(6, this.md5);
    os.writeInt32(7, this.status);
    os.writeString(8, this.error);
    os.writeString(9, this.ostype);
};
DCache.ReleaseInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.ReleaseInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.ReleaseInfo.prototype.toObject = function() { 
    return {
        "appName" : this.appName,
        "serverName" : this.serverName,
        "nodeName" : this.nodeName,
        "groupName" : this.groupName,
        "version" : this.version,
        "user" : this.user,
        "md5" : this.md5,
        "status" : this.status,
        "error" : this.error,
        "ostype" : this.ostype
    };
};
DCache.ReleaseInfo.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("appName") && (this.appName = json.appName);
    json.hasOwnProperty("serverName") && (this.serverName = json.serverName);
    json.hasOwnProperty("nodeName") && (this.nodeName = json.nodeName);
    json.hasOwnProperty("groupName") && (this.groupName = json.groupName);
    json.hasOwnProperty("version") && (this.version = json.version);
    json.hasOwnProperty("user") && (this.user = json.user);
    json.hasOwnProperty("md5") && (this.md5 = json.md5);
    json.hasOwnProperty("status") && (this.status = json.status);
    json.hasOwnProperty("error") && (this.error = json.error);
    json.hasOwnProperty("ostype") && (this.ostype = json.ostype);
};
DCache.ReleaseInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.ReleaseInfo.new = function () {
    return new DCache.ReleaseInfo();
};
DCache.ReleaseInfo.create = function (is) {
    return DCache.ReleaseInfo._readFrom(is);
};

DCache.ReleaseReq = function() {
    this.releaseInfo = new TarsStream.List(DCache.ReleaseInfo);
    this._classname = "DCache.ReleaseReq";
};
DCache.ReleaseReq._classname = "DCache.ReleaseReq";
DCache.ReleaseReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.ReleaseReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.ReleaseReq._readFrom = function (is) {
    var tmp = new DCache.ReleaseReq();
    tmp.releaseInfo = is.readList(0, true, TarsStream.List(DCache.ReleaseInfo));
    return tmp;
};
DCache.ReleaseReq.prototype._writeTo = function (os) {
    os.writeList(0, this.releaseInfo);
};
DCache.ReleaseReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.ReleaseReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.ReleaseReq.prototype.toObject = function() { 
    return {
        "releaseInfo" : this.releaseInfo.toObject()
    };
};
DCache.ReleaseReq.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("releaseInfo") && (this.releaseInfo.readFromObject(json.releaseInfo));
};
DCache.ReleaseReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.ReleaseReq.new = function () {
    return new DCache.ReleaseReq();
};
DCache.ReleaseReq.create = function (is) {
    return DCache.ReleaseReq._readFrom(is);
};

DCache.ReleaseRsp = function() {
    this.releaseId = 0;
    this.errMsg = "";
    this._classname = "DCache.ReleaseRsp";
};
DCache.ReleaseRsp._classname = "DCache.ReleaseRsp";
DCache.ReleaseRsp._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.ReleaseRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.ReleaseRsp._readFrom = function (is) {
    var tmp = new DCache.ReleaseRsp();
    tmp.releaseId = is.readInt32(0, true, 0);
    tmp.errMsg = is.readString(1, true, "");
    return tmp;
};
DCache.ReleaseRsp.prototype._writeTo = function (os) {
    os.writeInt32(0, this.releaseId);
    os.writeString(1, this.errMsg);
};
DCache.ReleaseRsp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.ReleaseRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.ReleaseRsp.prototype.toObject = function() { 
    return {
        "releaseId" : this.releaseId,
        "errMsg" : this.errMsg
    };
};
DCache.ReleaseRsp.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("releaseId") && (this.releaseId = json.releaseId);
    json.hasOwnProperty("errMsg") && (this.errMsg = json.errMsg);
};
DCache.ReleaseRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.ReleaseRsp.new = function () {
    return new DCache.ReleaseRsp();
};
DCache.ReleaseRsp.create = function (is) {
    return DCache.ReleaseRsp._readFrom(is);
};

DCache.ReleaseProgressReq = function() {
    this.releaseId = 0;
    this._classname = "DCache.ReleaseProgressReq";
};
DCache.ReleaseProgressReq._classname = "DCache.ReleaseProgressReq";
DCache.ReleaseProgressReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.ReleaseProgressReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.ReleaseProgressReq._readFrom = function (is) {
    var tmp = new DCache.ReleaseProgressReq();
    tmp.releaseId = is.readInt32(0, true, 0);
    return tmp;
};
DCache.ReleaseProgressReq.prototype._writeTo = function (os) {
    os.writeInt32(0, this.releaseId);
};
DCache.ReleaseProgressReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.ReleaseProgressReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.ReleaseProgressReq.prototype.toObject = function() { 
    return {
        "releaseId" : this.releaseId
    };
};
DCache.ReleaseProgressReq.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("releaseId") && (this.releaseId = json.releaseId);
};
DCache.ReleaseProgressReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.ReleaseProgressReq.new = function () {
    return new DCache.ReleaseProgressReq();
};
DCache.ReleaseProgressReq.create = function (is) {
    return DCache.ReleaseProgressReq._readFrom(is);
};

DCache.ReleaseProgressRsp = function() {
    this.releaseId = 0;
    this.percent = "";
    this.releaseInfo = new TarsStream.List(DCache.ReleaseInfo);
    this.errMsg = "";
    this._classname = "DCache.ReleaseProgressRsp";
};
DCache.ReleaseProgressRsp._classname = "DCache.ReleaseProgressRsp";
DCache.ReleaseProgressRsp._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.ReleaseProgressRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.ReleaseProgressRsp._readFrom = function (is) {
    var tmp = new DCache.ReleaseProgressRsp();
    tmp.releaseId = is.readInt32(0, true, 0);
    tmp.percent = is.readString(1, true, "");
    tmp.releaseInfo = is.readList(2, true, TarsStream.List(DCache.ReleaseInfo));
    tmp.errMsg = is.readString(3, true, "");
    return tmp;
};
DCache.ReleaseProgressRsp.prototype._writeTo = function (os) {
    os.writeInt32(0, this.releaseId);
    os.writeString(1, this.percent);
    os.writeList(2, this.releaseInfo);
    os.writeString(3, this.errMsg);
};
DCache.ReleaseProgressRsp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.ReleaseProgressRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.ReleaseProgressRsp.prototype.toObject = function() { 
    return {
        "releaseId" : this.releaseId,
        "percent" : this.percent,
        "releaseInfo" : this.releaseInfo.toObject(),
        "errMsg" : this.errMsg
    };
};
DCache.ReleaseProgressRsp.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("releaseId") && (this.releaseId = json.releaseId);
    json.hasOwnProperty("percent") && (this.percent = json.percent);
    json.hasOwnProperty("releaseInfo") && (this.releaseInfo.readFromObject(json.releaseInfo));
    json.hasOwnProperty("errMsg") && (this.errMsg = json.errMsg);
};
DCache.ReleaseProgressRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.ReleaseProgressRsp.new = function () {
    return new DCache.ReleaseProgressRsp();
};
DCache.ReleaseProgressRsp.create = function (is) {
    return DCache.ReleaseProgressRsp._readFrom(is);
};

DCache.ExpandReq = function() {
    this.appName = "";
    this.moduleName = "";
    this.cacheHost = new TarsStream.List(DCache.CacheHostParam);
    this.cacheType = DCache.DCacheType.KVCACHE;
    this.version = "";
    this.replace = false;
    this._classname = "DCache.ExpandReq";
};
DCache.ExpandReq._classname = "DCache.ExpandReq";
DCache.ExpandReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.ExpandReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.ExpandReq._readFrom = function (is) {
    var tmp = new DCache.ExpandReq();
    tmp.appName = is.readString(0, true, "");
    tmp.moduleName = is.readString(1, true, "");
    tmp.cacheHost = is.readList(2, true, TarsStream.List(DCache.CacheHostParam));
    tmp.cacheType = is.readInt32(3, true, DCache.DCacheType.KVCACHE);
    tmp.version = is.readString(4, true, "");
    tmp.replace = is.readBoolean(5, true, false);
    return tmp;
};
DCache.ExpandReq.prototype._writeTo = function (os) {
    os.writeString(0, this.appName);
    os.writeString(1, this.moduleName);
    os.writeList(2, this.cacheHost);
    os.writeInt32(3, this.cacheType);
    os.writeString(4, this.version);
    os.writeBoolean(5, this.replace);
};
DCache.ExpandReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.ExpandReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.ExpandReq.prototype.toObject = function() { 
    return {
        "appName" : this.appName,
        "moduleName" : this.moduleName,
        "cacheHost" : this.cacheHost.toObject(),
        "cacheType" : this.cacheType,
        "version" : this.version,
        "replace" : this.replace
    };
};
DCache.ExpandReq.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("appName") && (this.appName = json.appName);
    json.hasOwnProperty("moduleName") && (this.moduleName = json.moduleName);
    json.hasOwnProperty("cacheHost") && (this.cacheHost.readFromObject(json.cacheHost));
    json.hasOwnProperty("cacheType") && (this.cacheType = json.cacheType);
    json.hasOwnProperty("version") && (this.version = json.version);
    json.hasOwnProperty("replace") && (this.replace = json.replace);
};
DCache.ExpandReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.ExpandReq.new = function () {
    return new DCache.ExpandReq();
};
DCache.ExpandReq.create = function (is) {
    return DCache.ExpandReq._readFrom(is);
};

DCache.ExpandRsp = function() {
    this.errMsg = "";
    this._classname = "DCache.ExpandRsp";
};
DCache.ExpandRsp._classname = "DCache.ExpandRsp";
DCache.ExpandRsp._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.ExpandRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.ExpandRsp._readFrom = function (is) {
    var tmp = new DCache.ExpandRsp();
    tmp.errMsg = is.readString(0, true, "");
    return tmp;
};
DCache.ExpandRsp.prototype._writeTo = function (os) {
    os.writeString(0, this.errMsg);
};
DCache.ExpandRsp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.ExpandRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.ExpandRsp.prototype.toObject = function() { 
    return {
        "errMsg" : this.errMsg
    };
};
DCache.ExpandRsp.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("errMsg") && (this.errMsg = json.errMsg);
};
DCache.ExpandRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.ExpandRsp.new = function () {
    return new DCache.ExpandRsp();
};
DCache.ExpandRsp.create = function (is) {
    return DCache.ExpandRsp._readFrom(is);
};

DCache.TransferReq = function() {
    this.appName = "";
    this.moduleName = "";
    this.srcGroupName = "";
    this.hasDestServer = true;
    this.cacheHost = new TarsStream.List(DCache.CacheHostParam);
    this.cacheType = DCache.DCacheType.KVCACHE;
    this.version = "";
    this._classname = "DCache.TransferReq";
};
DCache.TransferReq._classname = "DCache.TransferReq";
DCache.TransferReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.TransferReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.TransferReq._readFrom = function (is) {
    var tmp = new DCache.TransferReq();
    tmp.appName = is.readString(0, true, "");
    tmp.moduleName = is.readString(1, true, "");
    tmp.srcGroupName = is.readString(2, true, "");
    tmp.hasDestServer = is.readBoolean(3, true, true);
    tmp.cacheHost = is.readList(4, true, TarsStream.List(DCache.CacheHostParam));
    tmp.cacheType = is.readInt32(5, true, DCache.DCacheType.KVCACHE);
    tmp.version = is.readString(6, true, "");
    return tmp;
};
DCache.TransferReq.prototype._writeTo = function (os) {
    os.writeString(0, this.appName);
    os.writeString(1, this.moduleName);
    os.writeString(2, this.srcGroupName);
    os.writeBoolean(3, this.hasDestServer);
    os.writeList(4, this.cacheHost);
    os.writeInt32(5, this.cacheType);
    os.writeString(6, this.version);
};
DCache.TransferReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.TransferReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.TransferReq.prototype.toObject = function() { 
    return {
        "appName" : this.appName,
        "moduleName" : this.moduleName,
        "srcGroupName" : this.srcGroupName,
        "hasDestServer" : this.hasDestServer,
        "cacheHost" : this.cacheHost.toObject(),
        "cacheType" : this.cacheType,
        "version" : this.version
    };
};
DCache.TransferReq.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("appName") && (this.appName = json.appName);
    json.hasOwnProperty("moduleName") && (this.moduleName = json.moduleName);
    json.hasOwnProperty("srcGroupName") && (this.srcGroupName = json.srcGroupName);
    json.hasOwnProperty("hasDestServer") && (this.hasDestServer = json.hasDestServer);
    json.hasOwnProperty("cacheHost") && (this.cacheHost.readFromObject(json.cacheHost));
    json.hasOwnProperty("cacheType") && (this.cacheType = json.cacheType);
    json.hasOwnProperty("version") && (this.version = json.version);
};
DCache.TransferReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.TransferReq.new = function () {
    return new DCache.TransferReq();
};
DCache.TransferReq.create = function (is) {
    return DCache.TransferReq._readFrom(is);
};

DCache.TransferRsp = function() {
    this.errMsg = "";
    this._classname = "DCache.TransferRsp";
};
DCache.TransferRsp._classname = "DCache.TransferRsp";
DCache.TransferRsp._write = function (os, tag, value) { os.writeStruct(tag, value); };
DCache.TransferRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
DCache.TransferRsp._readFrom = function (is) {
    var tmp = new DCache.TransferRsp();
    tmp.errMsg = is.readString(0, true, "");
    return tmp;
};
DCache.TransferRsp.prototype._writeTo = function (os) {
    os.writeString(0, this.errMsg);
};
DCache.TransferRsp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
DCache.TransferRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
DCache.TransferRsp.prototype.toObject = function() { 
    return {
        "errMsg" : this.errMsg
    };
};
DCache.TransferRsp.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("errMsg") && (this.errMsg = json.errMsg);
};
DCache.TransferRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
DCache.TransferRsp.new = function () {
    return new DCache.TransferRsp();
};
DCache.TransferRsp.create = function (is) {
    return DCache.TransferRsp._readFrom(is);
};


var __DCache_DCacheOpt$expandDCache$EN = function (expandReq) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, expandReq);
    return os.getBinBuffer();
};

var __DCache_DCacheOpt$expandDCache$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "expandRsq" : is.readStruct(2, true, DCache.ExpandRsp)
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __DCache_DCacheOpt$expandDCache$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

DCache.DCacheOptProxy.prototype.expandDCache = function (expandReq) {
    return this._worker.tars_invoke("expandDCache", __DCache_DCacheOpt$expandDCache$EN(expandReq), arguments[arguments.length - 1]).then(__DCache_DCacheOpt$expandDCache$DE, __DCache_DCacheOpt$expandDCache$ER);
};

var __DCache_DCacheOpt$getReleaseProgress$EN = function (progressReq) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, progressReq);
    return os.getBinBuffer();
};

var __DCache_DCacheOpt$getReleaseProgress$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "progressRsp" : is.readStruct(2, true, DCache.ReleaseProgressRsp)
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __DCache_DCacheOpt$getReleaseProgress$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

DCache.DCacheOptProxy.prototype.getReleaseProgress = function (progressReq) {
    return this._worker.tars_invoke("getReleaseProgress", __DCache_DCacheOpt$getReleaseProgress$EN(progressReq), arguments[arguments.length - 1]).then(__DCache_DCacheOpt$getReleaseProgress$DE, __DCache_DCacheOpt$getReleaseProgress$ER);
};

var __DCache_DCacheOpt$getUninstallPercent$EN = function (uninstallInfo) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, uninstallInfo);
    return os.getBinBuffer();
};

var __DCache_DCacheOpt$getUninstallPercent$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "progressRsp" : is.readStruct(2, true, DCache.UninstallProgressRsp)
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __DCache_DCacheOpt$getUninstallPercent$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

DCache.DCacheOptProxy.prototype.getUninstallPercent = function (uninstallInfo) {
    return this._worker.tars_invoke("getUninstallPercent", __DCache_DCacheOpt$getUninstallPercent$EN(uninstallInfo), arguments[arguments.length - 1]).then(__DCache_DCacheOpt$getUninstallPercent$DE, __DCache_DCacheOpt$getUninstallPercent$ER);
};

var __DCache_DCacheOpt$installApp$EN = function (installReq) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, installReq);
    return os.getBinBuffer();
};

var __DCache_DCacheOpt$installApp$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "instalRsp" : is.readStruct(2, true, DCache.InstallAppRsp)
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __DCache_DCacheOpt$installApp$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

DCache.DCacheOptProxy.prototype.installApp = function (installReq) {
    return this._worker.tars_invoke("installApp", __DCache_DCacheOpt$installApp$EN(installReq), arguments[arguments.length - 1]).then(__DCache_DCacheOpt$installApp$DE, __DCache_DCacheOpt$installApp$ER);
};

var __DCache_DCacheOpt$installKVCacheModule$EN = function (kvCacheReq) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, kvCacheReq);
    return os.getBinBuffer();
};

var __DCache_DCacheOpt$installKVCacheModule$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "kvCacheRsp" : is.readStruct(2, true, DCache.InstallKVCacheRsp)
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __DCache_DCacheOpt$installKVCacheModule$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

DCache.DCacheOptProxy.prototype.installKVCacheModule = function (kvCacheReq) {
    return this._worker.tars_invoke("installKVCacheModule", __DCache_DCacheOpt$installKVCacheModule$EN(kvCacheReq), arguments[arguments.length - 1]).then(__DCache_DCacheOpt$installKVCacheModule$DE, __DCache_DCacheOpt$installKVCacheModule$ER);
};

var __DCache_DCacheOpt$installMKVCacheModule$EN = function (mkvCacheReq) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, mkvCacheReq);
    return os.getBinBuffer();
};

var __DCache_DCacheOpt$installMKVCacheModule$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "mkvCacheRsp" : is.readStruct(2, true, DCache.InstallMKVCacheRsp)
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __DCache_DCacheOpt$installMKVCacheModule$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

DCache.DCacheOptProxy.prototype.installMKVCacheModule = function (mkvCacheReq) {
    return this._worker.tars_invoke("installMKVCacheModule", __DCache_DCacheOpt$installMKVCacheModule$EN(mkvCacheReq), arguments[arguments.length - 1]).then(__DCache_DCacheOpt$installMKVCacheModule$DE, __DCache_DCacheOpt$installMKVCacheModule$ER);
};

var __DCache_DCacheOpt$releaseServer$EN = function (releaseInfo) {
    var os = new TarsStream.TarsOutputStream();
    os.writeList(1, releaseInfo);
    return os.getBinBuffer();
};

var __DCache_DCacheOpt$releaseServer$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "releaseRsp" : is.readStruct(2, true, DCache.ReleaseRsp)
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __DCache_DCacheOpt$releaseServer$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

DCache.DCacheOptProxy.prototype.releaseServer = function (releaseInfo) {
    return this._worker.tars_invoke("releaseServer", __DCache_DCacheOpt$releaseServer$EN(releaseInfo), arguments[arguments.length - 1]).then(__DCache_DCacheOpt$releaseServer$DE, __DCache_DCacheOpt$releaseServer$ER);
};

var __DCache_DCacheOpt$reloadRouterConfByModuleFromDB$EN = function (appName, moduleName, sRouterServerName) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, appName);
    os.writeString(2, moduleName);
    os.writeString(3, sRouterServerName);
    return os.getBinBuffer();
};

var __DCache_DCacheOpt$reloadRouterConfByModuleFromDB$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readBoolean(0, true, true),
                "arguments" : {
                    "sResult" : is.readString(4, true, "")
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __DCache_DCacheOpt$reloadRouterConfByModuleFromDB$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

DCache.DCacheOptProxy.prototype.reloadRouterConfByModuleFromDB = function (appName, moduleName, sRouterServerName) {
    return this._worker.tars_invoke("reloadRouterConfByModuleFromDB", __DCache_DCacheOpt$reloadRouterConfByModuleFromDB$EN(appName, moduleName, sRouterServerName), arguments[arguments.length - 1]).then(__DCache_DCacheOpt$reloadRouterConfByModuleFromDB$DE, __DCache_DCacheOpt$reloadRouterConfByModuleFromDB$ER);
};

var __DCache_DCacheOpt$transferDCache$EN = function (transferReq) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, transferReq);
    return os.getBinBuffer();
};

var __DCache_DCacheOpt$transferDCache$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "transferRsp" : is.readStruct(2, true, DCache.TransferRsp)
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __DCache_DCacheOpt$transferDCache$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

DCache.DCacheOptProxy.prototype.transferDCache = function (transferReq) {
    return this._worker.tars_invoke("transferDCache", __DCache_DCacheOpt$transferDCache$EN(transferReq), arguments[arguments.length - 1]).then(__DCache_DCacheOpt$transferDCache$DE, __DCache_DCacheOpt$transferDCache$ER);
};

var __DCache_DCacheOpt$uninstall4DCache$EN = function (uninstallInfo) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, uninstallInfo);
    return os.getBinBuffer();
};

var __DCache_DCacheOpt$uninstall4DCache$DE = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "uninstallRsp" : is.readStruct(2, true, DCache.UninstallRsp)
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TarsError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __DCache_DCacheOpt$uninstall4DCache$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

DCache.DCacheOptProxy.prototype.uninstall4DCache = function (uninstallInfo) {
    return this._worker.tars_invoke("uninstall4DCache", __DCache_DCacheOpt$uninstall4DCache$EN(uninstallInfo), arguments[arguments.length - 1]).then(__DCache_DCacheOpt$uninstall4DCache$DE, __DCache_DCacheOpt$uninstall4DCache$ER);
};



